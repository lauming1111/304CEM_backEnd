input RecipeInput {
    _id: ID
    name: String
    context:String
    createdTimestamp:String
    updateTimestamp:String
    creator: String
}

input CommentInput {
    _id: ID
    comment: String
    rate:Int
    recipeId:String!
    createdTimestamp:String
    updateTimestamp:String
    creator: String
}

input UserInfoInput {
    _id: ID
    name: String!
    email: String!
    password: String!
    createdTimestamp:String
    updateTimestamp:String
}

type Comment {
    _id: ID
    comment: String
    rate:String
    recipeId:String
    createdTimestamp:String
    updateTimestamp:String
    creator: UserInfo
}

type UserInfo {
    _id: ID!
    name: String!
    email: String!
    password: String
    createdTimestamp:String
    updateTimestamp:String
    createdRecipes: [Recipe!]
    createdComments: [Comment!]
}

type Recipe {
    _id: ID
    name: String
    context:String
    createdTimestamp:String
    updateTimestamp:String
    creator: UserInfo
    createdComments: [Comment!]
}

type Auth {
    userId: ID!
    email: String!
    name:String
    token: String!
    tokenExpirationDate: Int!
}

type RootQuery {
    recipes: [Recipe!]!
    comments:[Comment!]!
    users: [UserInfo!]!
    login(email: String!, password: String!): Auth!
}

type RootMutation {
    createRecipes(recipeInput: RecipeInput): Recipe
    createUser(userInput: UserInfoInput): UserInfo
    createComments(commentInput:CommentInput):Comment
    deleteRecipe(recipeId: ID!): Recipe!
    deleteComment(commentId: ID!): Comment!
}

schema {
    query: RootQuery
    mutation: RootMutation
}
